syntax = "proto3";

package io.thingz.grpc.v1;

option go_package = "github.com/mchmarny/grpc-lab/v1";

import "google/api/annotations.proto";


// Service provides APIs to user application to access the service.
service Service {
  // Ping method on the service.
  rpc Ping(PingRequest) returns (PingResponse) {
    option (google.api.http) = {
      post : "/v1/ping"
      body : "*"
    };
  };

  // Stream is like Ping but with stream
  rpc Stream(stream PingRequest) returns (stream PingResponse) {
    option (google.api.http) = {
      post : "/v1/stream"
      body : "*"
    };
  };

}

message Content {
  // Required. Message ID
  string id = 1;

  // Required. Message content 
  bytes data = 2;

  // Optional. Message metadata
  map<string,string> metadata = 3;
}


// PingRequest represents the request message for Ping invocation.
message PingRequest {
  // Required. Represents ping content
  Content content = 1;

  // Represents epoch based time when the message was sent
  int64 sent = 2;
}

// GetStateRequest is the message to get key-value states from specific state store.
message PingResponse {
  enum ResultType {
    UNKNOWN = 0;
    Success = 1;
    Eror = 2;
  }
  // Represents request ID
  string messageID = 1;

  // Represents the count of messages
  int64 messageCount = 2;

  // Represents the count of messages
  int64 processed = 3;

  // Represents processing detail
  string Detail = 4;
}
